open Float

(*--------------------------------------------------*)
(* One float constant needed everywhere             *)
(*--------------------------------------------------*)
const pi  :float = 3.14159265358979
const zero:float = 0.0


(*--------------------------------------------------*)
(* Complex type and basic operations                *)
(*--------------------------------------------------*)
type complex =
  {
    re : float ;
    im : float
  }
const zero_c:complex = { re = 0.0 ; im = 0.0 }


fun complex_add(i1:complex;i2:complex) returns (o:complex)
let
  o = { re = i1.re +. i2.re ; im = i1.im +. i2.im } 
tel
fun complex_sub(i1:complex;i2:complex) returns (o:complex)
let
  o = { re = i1.re -. i2.re ; im = i1.im -. i2.im } 
tel
fun complex_mul(i1:complex;i2:complex) returns (o:complex)
let
  o = { re = (i1.re *. i2.re)-.(i1.im *. i2.im) ;
        im = (i1.re *. i2.im)+.(i1.im *. i2.re) } 
tel
fun complex_div(i1:complex;i2:float) returns (o:complex)
let
	o = {re = i1.re/.i2 ; im = i1.im/.i2 };
tel
fun swap_re_im(i:complex) returns (o:complex)
let
  o = { re = i.im ; im = i.re } 
tel
(* Multiply a complex by a float *)
fun float_prod(f:float;i:complex) returns (o:complex)
let
  o = { re = i.re*.f ; im = i.im*.f }
tel

(*--------------------------------------------------*)
(* Conversions between cartesian and polar          *)
(* coordinates.                                     *)
(*--------------------------------------------------*)
fun complex2polar(i:complex) returns (mag:float;ang:float)
let
  mag = float_sqrt(i.re*.i.re+.i.im*.i.im) ;
  ang = float_atan2(i.im,i.re) ;
tel
fun polar2complex(mag:float;ang:float) returns (o:complex)
let
  o = {
        re = mag *. float_cos(ang) ;
	im = mag *. float_sin(ang)
      } ;
tel

(*--------------------------------------------------*)
(* Conversions between complex and float            *)
(*--------------------------------------------------*)
fun re (i:complex) returns (o:float)
let
  o = i.re ;
tel
fun im (i:complex) returns (o:float)
let
  o = i.im ;
tel
fun float2complex(i:float) returns (o:complex)
let
  o = { re = i ; im = 0.0 } ;
tel
