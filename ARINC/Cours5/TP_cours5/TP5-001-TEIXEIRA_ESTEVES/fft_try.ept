open Constants
open Float
open Complex
open Fftc

(*--------------------------------------------------*)
(* 2-point FFT butterfly                            *)
(*--------------------------------------------------*)
fun single_bf_step(i1:complex;i2:complex;twid:complex)
                  returns
		  (o1:complex;o2:complex)
let
  o1 = complex_add(i1,i2) ;
  o2 = complex_mul(complex_sub(i1,i2),twid) ;
tel

(*--------------------------------------------------*)
(* Vector butterfly                                 *)
(*--------------------------------------------------*)
fun bf<<n:int>>(i1:complex^n;i2:complex^n) 
       returns (o1:complex^n;o2:complex^n)
let
  (o1,o2) = map<<n>> single_bf_step(i1,i2,twiddle[n..(2*n-1)]) ;
tel

(*--------------------------------------------------*)
(* FFT functions. For size 2, it's a direct         *)
(* application of single_bf_step. For larger FFTs,  *)
(* I have to create one instance per FFT size, due  *)
(* to Heptagon limitations.                         *)
(*--------------------------------------------------*)
fun fft_aux2(i:complex^2) returns (o:complex^2)
var x0,x1:complex ; 
let
  (x0,x1) = single_bf_step(i[0],i[1],twiddle[1]) ;
  o = [x0,x1] ;
tel
fun fft_aux4(i:complex^4) returns (o:complex^4)
var y1,y2:complex^2 ;
let
  (y1,y2) = bf<<2>>(i[0..1],i[2..3]) ;
  o = (fft_aux2 (y1) )@(fft_aux2 (y2)) ;
tel
fun fft_aux8(i:complex^8) returns (o:complex^8)
var y1,y2:complex^4 ;
let
  (y1,y2) = bf<<4>>(i[0..3],i[4..7]) ;
  o = (fft_aux4 (y1) )@(fft_aux4 (y2)) ;
tel

